1、golang中的make和new的区别？
new用于分配内存并返回指向零值的指针，适用于所有类型。
make使用于创建和初始化切片、映射和通道，返回的是初始化后的值

2、数组和切片的区别？
在Go语言中，数组和切片是两个不同的数据结构，它们在使用和行为上有显著的区别，一下是主要的区别
数组：固定长度，值类型，赋值或传递时会拷贝整个数组。
切片：动态长度、引用类型，指向一个底层数组的一部分，赋值或传递时共享同一个底层数组。

3、for range的时候它的地址会发生变化吗？
在Go语言中，当使用‘for range’循环遍历切片、数组、映射或字符串时，循环变量的地址在每次迭代中
都会变化。这是因为‘for range’循环中使用的迭代变量在每次迭代时都是一个新的变量，而不是对同一个变量
的更新。
总结：在‘for range’循环中，每次迭代时用于存储当前索引和值的变量是新的变量，虽然它们可能被分配到
相同的内存位置，但在每次迭代中，它们的地址在逻辑上是变化的。因此，如果你需要在循环中使用变量的地址，
需要特别小心这种行为。例如，如果你在循环中将变量的地址存储到一个切片中，你可能会所有存储的地址都是相同的。

4、go defer，多个 defer 的顺序，defer 在什么时机会修改返回值？（for defer）
defer recover 的问题？(主要是能不能捕获)
‘defer’语句用于延迟执行函数，在包括它的函数即将返回之前执行。多个‘defer’语句的执行顺序、对
返回值的影响以及与‘recover’的交互需要详细说明。
多个‘defer‘的顺序
多个‘defer‘语句按先进后出的顺序执行，也就是说，后定义的’defer’语句会先执行。

5、uint类型溢出
在Go语言中，‘uint‘类型是一种无符号整数类型，它可以存储非负整数。不同于有符号整数，’uint‘类型的值范围
是从0到特定的最大值，具体取决于系统架构和Go编译器的实现。
在32位系统上，‘uint’类型的范围是0到4294967295（2^32 - 1）。

6、介绍一下rune类型
在Go语言中，‘rune’类型是一个特殊的整数类型，用于表示Unicode代码点。
‘rune‘是’int32‘的别名，专门用来处理和表示字符。使用’rune‘类型可以方便地处理Unicode字符和字符串。

7、golang中解析tag是怎么实现的？反射原理是什么？
在Go语言中，标签（tag）通常用于为结构体字段添加元数据。标签可以通过反射机制来解析和使用。
反射是Go语言中的一种强大特性，它允许程序在运行时检查变量类型、获取其值和操作它们。

8、调用函数传入结构体时，应该传值还是指针？（Golang都是值传递）
值传递：传递结构体的副本，函数内的修改不会影响原结构体。适用于结构体较小或函数只读结构体内容的情况。
指针传递：传递结构体的指针，函数内的修改会影响结构体。适用于结构体较大或函数需要修改结构体内容的情况

9、在Go语言中，结构体（‘struct‘）是可以进行比较的，但有一些条件需要满足。结构体的比较通常使用‘==’和
‘！=’运算符进行。

10、Go闭包
Go语言中，闭包是一种函数类型，它允许函数内部引用和修改其外部函数的变量。闭包不仅包括函数本身，还包括
它所捕获的变量的环境。因此，闭包可以用来保持状态或创建具有私有数据的函数。

context相关：
1、context结构是什么样的？
在Go语言中，‘context’包提供了一个‘context’类型，用于传递请求范围的数据、取消信号和截止日期。‘Context‘是
一种机制，允许在多个函数之间传递上下文信息，并帮助管理跨越多个goroutine的操作。

2、context的使用场景和用途？
‘context‘包在Go语言中有多种使用场景和用途，主要用于跨域多个goroutine和函数调用的操作。它为
管理超时、取消信号和传递请求范围数据提供了机制。

channel相关：
1、channel是否线程安全？锁用在什么地方？
在Go语言中，通道（channel）是一种内置的数据结构，用于在多个goroutine之间安全地传递数据。通道
在设计上是线程安全的，但在使用它们时，有一些细节和最佳时间需要了解，以确保程序的真确性和效率。
通道的线程安全
1. 内置线程安全：
. Go的通道本身是线程安全的。这意味着你可以从多个goroutine同时发送和接受数据，而不需要手动实现同步。
. 通道的实现确保了在发送和接收操作时不会发生数据竞争，保证了数据的完整性和一致性。
2. 操作线程安全：
‘send’操作（‘ch <- value')和‘receive’操作（‘value := <- ch')是原子操作。通道会自动处理这些操作的同步，不会出现
数据竞争。

3、go channel的底层实现原理（数据结构）
Go 语言的通道（channel）是一个强大的并发原语，用于在goroutine之间安全地传递数据。通道的底层实现涉及到多个
数据结构和机制，旨在提高高效的同步和数据传输。







