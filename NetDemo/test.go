package main

import (
	"fmt"
	"regexp"
)

func getSNI1(buf []byte) string {
	var sni string
	re := regexp.MustCompile(`^(?:[a-z0-9-]+\.)+[a-z]+$`)

	for i := 0; i < len(buf); i++ {
		if i > 0 && buf[i-1] == 0 && buf[i] == 0 {
			start := i + 2
			length := int(buf[i+1])
			end := start + length
			if start < end && end <= len(buf) {
				str := string(buf[start:end])
				if re.MatchString(str) {
					sni = str
					break
				}
			}
		}
	}

	return sni
}

func main() {
	data := []byte{
		0x16, 0x03, 0x01, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf4, 0x03, 0x03, 0x8f, 0xb9, 0x6b, 0x7e, 0x64,
		0x38, 0xec, 0xd1, 0xe8, 0x6e, 0x72, 0x0c, 0x56, 0x67, 0x42, 0x98, 0xb1, 0xb0, 0xc2, 0xb9, 0xc6,
		0xb0, 0xe9, 0xf1, 0xb3, 0x06, 0x2c, 0x24, 0x8d, 0x08, 0x15, 0x20, 0x29, 0xf2, 0xc5, 0x20, 0x00,
		0xee, 0xbc, 0x8e, 0x6a, 0x40, 0x1f, 0x6f, 0x15, 0x21, 0x69, 0x05, 0x61, 0x13, 0x1e, 0x35, 0xa1,
		0x96, 0x33, 0x8e, 0xc3, 0xb2, 0xe4, 0xa1, 0x77, 0xb3, 0x3e, 0x6e, 0x00, 0x1c, 0xc0, 0x2b, 0xc0,
		0x2f, 0xc0, 0x2c, 0xc0, 0x30, 0xca, 0x9c, 0xca, 0x8c, 0xc0, 0x09, 0xc0, 0x13, 0xc0, 0x0a, 0xc0,
		0x14, 0xc0, 0x12, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
		0x6d, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08, 0x00,
		0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00, 0x0d, 0x00,
		0x1a, 0x00, 0x18, 0x08, 0x04, 0x04, 0x03, 0x08, 0x07, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05,
		0x01, 0x06, 0x01, 0x05, 0x03, 0x06, 0x03, 0x02, 0x01, 0x02, 0x03, 0xff, 0x01, 0x00, 0x01, 0x00,
		0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x05, 0x04, 0x03, 0x04, 0x03, 0x03,
		0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x0a, 0xe4, 0x45, 0x89, 0xba, 0x51,
		0xd9, 0xb2, 0x2a, 0xc8, 0x39, 0x0b, 0x1f, 0x25, 0x9f, 0x04, 0xfb, 0x5b, 0x0b, 0x0a, 0x78, 0x70,
		0xc6, 0x42, 0x48, 0x20, 0x90, 0x58, 0x84, 0x7c, 0xba, 0x77,
	}

	//payload_format := []byte{
	//	// TLS record
	//	0x16,       // Content Type: Handshake
	//	0x03, 0x01, // Version: TLS 1.0
	//	0x00, 0x6c, // Length (use for bounds checking)
	//	// Handshake
	//	0x01,             // Handshake Type: Client Hello
	//	0x00, 0x00, 0x68, // Length (use for bounds checking)
	//	0x03, 0x03, // Version: TLS 1.2
	//	// Random (32 bytes fixed length)
	//	0xb6, 0xb2, 0x6a, 0xfb, 0x55, 0x5e, 0x03, 0xd5,
	//	0x65, 0xa3, 0x6a, 0xf0, 0x5e, 0xa5, 0x43, 0x02,
	//	0x93, 0xb9, 0x59, 0xa7, 0x54, 0xc3, 0xdd, 0x78,
	//	0x57, 0x58, 0x34, 0xc5, 0x82, 0xfd, 0x53, 0xd1,
	//	0x00,       // Session ID Length (skip past this much)
	//	0x00, 0x04, // Cipher Suites Length (skip past this much)
	//	0x00, 0x01, // NULL-MD5
	//	0x00, 0xff, // RENEGOTIATION INFO SCSV
	//	0x01,       // Compression Methods Length (skip past this much)
	//	0x00,       // NULL
	//	0x00, 0x3b, // Extensions Length (use for bounds checking)
	//	// Extension
	//	0x00, 0x00, // Extension Type: Server Name (check extension type)
	//	0x00, 0x0e, // Length (use for bounds checking)
	//	0x00, 0x0c, // Server Name Indication Length
	//	0x00,       // Server Name Type: host_name (check server name type)
	//	0x00, 0x09, // Length (length of your data)
	//	// "localhost" (data your after)
	//	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
	//	// Extension
	//	0x00, 0x0d, // Extension Type: Signature Algorithms (check extension type)
	//	0x00, 0x20, // Length (skip past since this is the wrong extension)
	//	// Data
	//	0x00, 0x1e, 0x06, 0x01, 0x06, 0x02, 0x06, 0x03,
	//	0x05, 0x01, 0x05, 0x02, 0x05, 0x03, 0x04, 0x01,
	//	0x04, 0x02, 0x04, 0x03, 0x03, 0x01, 0x03, 0x02,
	//	0x03, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03,
	//	// Extension
	//	0x00, 0x0f, // Extension Type: Heart Beat (check extension type)
	//	0x00, 0x01, // Length (skip past since this is the wrong extension)
	//	0x01, // Mode: Peer allows to send requests
	//}

	fmt.Println("sni: ", getSNI1(data))
}
